// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: obra.sql

package db

import (
	"context"
	"database/sql"
)

const createObra = `-- name: CreateObra :one
INSERT INTO obra (titulo, descripcion, artista, precio, vendida)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, titulo, descripcion, artista, fecha_ingreso, precio, vendida
`

type CreateObraParams struct {
	Titulo      string         `json:"titulo"`
	Descripcion sql.NullString `json:"descripcion"`
	Artista     string         `json:"artista"`
	Precio      string         `json:"precio"`
	Vendida     sql.NullBool   `json:"vendida"`
}

func (q *Queries) CreateObra(ctx context.Context, arg CreateObraParams) (Obra, error) {
	row := q.db.QueryRowContext(ctx, createObra,
		arg.Titulo,
		arg.Descripcion,
		arg.Artista,
		arg.Precio,
		arg.Vendida,
	)
	var i Obra
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Descripcion,
		&i.Artista,
		&i.FechaIngreso,
		&i.Precio,
		&i.Vendida,
	)
	return i, err
}

const deleteObra = `-- name: DeleteObra :exec
DELETE FROM obra
WHERE id = $1
`

func (q *Queries) DeleteObra(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteObra, id)
	return err
}

const getObraById = `-- name: GetObraById :one
SELECT id, titulo, descripcion, artista, fecha_ingreso, precio, vendida 
FROM obra 
WHERE id = $1
`

func (q *Queries) GetObraById(ctx context.Context, id int32) (Obra, error) {
	row := q.db.QueryRowContext(ctx, getObraById, id)
	var i Obra
	err := row.Scan(
		&i.ID,
		&i.Titulo,
		&i.Descripcion,
		&i.Artista,
		&i.FechaIngreso,
		&i.Precio,
		&i.Vendida,
	)
	return i, err
}

const listAvailableObras = `-- name: ListAvailableObras :many
SELECT id, titulo, descripcion, artista, fecha_ingreso, precio, vendida 
FROM obra
WHERE vendida = FALSE
ORDER BY titulo DESC
`

func (q *Queries) ListAvailableObras(ctx context.Context) ([]Obra, error) {
	rows, err := q.db.QueryContext(ctx, listAvailableObras)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Obra
	for rows.Next() {
		var i Obra
		if err := rows.Scan(
			&i.ID,
			&i.Titulo,
			&i.Descripcion,
			&i.Artista,
			&i.FechaIngreso,
			&i.Precio,
			&i.Vendida,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObras = `-- name: ListObras :many
SELECT id, titulo, descripcion, artista, fecha_ingreso, precio, vendida            
FROM obra
`

func (q *Queries) ListObras(ctx context.Context) ([]Obra, error) {
	rows, err := q.db.QueryContext(ctx, listObras)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Obra
	for rows.Next() {
		var i Obra
		if err := rows.Scan(
			&i.ID,
			&i.Titulo,
			&i.Descripcion,
			&i.Artista,
			&i.FechaIngreso,
			&i.Precio,
			&i.Vendida,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateObra = `-- name: UpdateObra :exec
UPDATE obra
SET titulo = $2, descripcion = $3, artista = $4, precio = $5, vendida = $6
WHERE id = $1
`

type UpdateObraParams struct {
	ID          int32          `json:"id"`
	Titulo      string         `json:"titulo"`
	Descripcion sql.NullString `json:"descripcion"`
	Artista     string         `json:"artista"`
	Precio      string         `json:"precio"`
	Vendida     sql.NullBool   `json:"vendida"`
}

func (q *Queries) UpdateObra(ctx context.Context, arg UpdateObraParams) error {
	_, err := q.db.ExecContext(ctx, updateObra,
		arg.ID,
		arg.Titulo,
		arg.Descripcion,
		arg.Artista,
		arg.Precio,
		arg.Vendida,
	)
	return err
}
